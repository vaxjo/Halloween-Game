#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Halloween_Game
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Gallimaufry")]
	public partial class hgameDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPlayer(Player instance);
    partial void UpdatePlayer(Player instance);
    partial void DeletePlayer(Player instance);
    partial void InsertPlayerItem(PlayerItem instance);
    partial void UpdatePlayerItem(PlayerItem instance);
    partial void DeletePlayerItem(PlayerItem instance);
    partial void InsertNewsfeed(Newsfeed instance);
    partial void UpdateNewsfeed(Newsfeed instance);
    partial void DeleteNewsfeed(Newsfeed instance);
    partial void InsertPlayerTask(PlayerTask instance);
    partial void UpdatePlayerTask(PlayerTask instance);
    partial void DeletePlayerTask(PlayerTask instance);
    partial void InsertItem(Item instance);
    partial void UpdateItem(Item instance);
    partial void DeleteItem(Item instance);
    partial void InsertSession(Session instance);
    partial void UpdateSession(Session instance);
    partial void DeleteSession(Session instance);
    partial void InsertTask(Task instance);
    partial void UpdateTask(Task instance);
    partial void DeleteTask(Task instance);
    partial void InsertNotification(Notification instance);
    partial void UpdateNotification(Notification instance);
    partial void DeleteNotification(Notification instance);
    partial void InsertTeam(Team instance);
    partial void UpdateTeam(Team instance);
    partial void DeleteTeam(Team instance);
    #endregion
		
		public hgameDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["GallimaufryConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public hgameDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public hgameDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public hgameDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public hgameDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Player> Players
		{
			get
			{
				return this.GetTable<Player>();
			}
		}
		
		public System.Data.Linq.Table<PlayerItem> PlayerItems
		{
			get
			{
				return this.GetTable<PlayerItem>();
			}
		}
		
		public System.Data.Linq.Table<Newsfeed> Newsfeeds
		{
			get
			{
				return this.GetTable<Newsfeed>();
			}
		}
		
		public System.Data.Linq.Table<PlayerTask> PlayerTasks
		{
			get
			{
				return this.GetTable<PlayerTask>();
			}
		}
		
		public System.Data.Linq.Table<Item> Items
		{
			get
			{
				return this.GetTable<Item>();
			}
		}
		
		public System.Data.Linq.Table<Session> Sessions
		{
			get
			{
				return this.GetTable<Session>();
			}
		}
		
		public System.Data.Linq.Table<Task> Tasks
		{
			get
			{
				return this.GetTable<Task>();
			}
		}
		
		public System.Data.Linq.Table<Notification> Notifications
		{
			get
			{
				return this.GetTable<Notification>();
			}
		}
		
		public System.Data.Linq.Table<Team> Teams
		{
			get
			{
				return this.GetTable<Team>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HGame.Player")]
	public partial class Player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.Guid _sessionId;
		
		private string _teamId;
		
		private System.DateTime _created;
		
		private int _rank;
		
		private string _readNotifications;
		
		private bool _idle;
		
		private EntitySet<PlayerItem> _PlayerItems;
		
		private EntitySet<PlayerTask> _PlayerTasks;
		
		private EntityRef<Session> _Session;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnsessionIdChanging(System.Guid value);
    partial void OnsessionIdChanged();
    partial void OnteamIdChanging(string value);
    partial void OnteamIdChanged();
    partial void OncreatedChanging(System.DateTime value);
    partial void OncreatedChanged();
    partial void OnrankChanging(int value);
    partial void OnrankChanged();
    partial void OnreadNotificationsChanging(string value);
    partial void OnreadNotificationsChanged();
    partial void OnidleChanging(bool value);
    partial void OnidleChanged();
    #endregion
		
		public Player()
		{
			this._PlayerItems = new EntitySet<PlayerItem>(new Action<PlayerItem>(this.attach_PlayerItems), new Action<PlayerItem>(this.detach_PlayerItems));
			this._PlayerTasks = new EntitySet<PlayerTask>(new Action<PlayerTask>(this.attach_PlayerTasks), new Action<PlayerTask>(this.detach_PlayerTasks));
			this._Session = default(EntityRef<Session>);
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sessionId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid sessionId
		{
			get
			{
				return this._sessionId;
			}
			set
			{
				if ((this._sessionId != value))
				{
					if (this._Session.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsessionIdChanging(value);
					this.SendPropertyChanging();
					this._sessionId = value;
					this.SendPropertyChanged("sessionId");
					this.OnsessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamId", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string teamId
		{
			get
			{
				return this._teamId;
			}
			set
			{
				if ((this._teamId != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnteamIdChanging(value);
					this.SendPropertyChanging();
					this._teamId = value;
					this.SendPropertyChanged("teamId");
					this.OnteamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created", DbType="DateTime2 NOT NULL")]
		public System.DateTime created
		{
			get
			{
				return this._created;
			}
			set
			{
				if ((this._created != value))
				{
					this.OncreatedChanging(value);
					this.SendPropertyChanging();
					this._created = value;
					this.SendPropertyChanged("created");
					this.OncreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rank", DbType="Int NOT NULL")]
		public int rank
		{
			get
			{
				return this._rank;
			}
			set
			{
				if ((this._rank != value))
				{
					this.OnrankChanging(value);
					this.SendPropertyChanging();
					this._rank = value;
					this.SendPropertyChanged("rank");
					this.OnrankChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_readNotifications", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string readNotifications
		{
			get
			{
				return this._readNotifications;
			}
			set
			{
				if ((this._readNotifications != value))
				{
					this.OnreadNotificationsChanging(value);
					this.SendPropertyChanging();
					this._readNotifications = value;
					this.SendPropertyChanged("readNotifications");
					this.OnreadNotificationsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idle", DbType="Bit NOT NULL")]
		public bool idle
		{
			get
			{
				return this._idle;
			}
			set
			{
				if ((this._idle != value))
				{
					this.OnidleChanging(value);
					this.SendPropertyChanging();
					this._idle = value;
					this.SendPropertyChanged("idle");
					this.OnidleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_PlayerItem", Storage="_PlayerItems", ThisKey="id", OtherKey="playerId")]
		public EntitySet<PlayerItem> PlayerItems
		{
			get
			{
				return this._PlayerItems;
			}
			set
			{
				this._PlayerItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_PlayerTask", Storage="_PlayerTasks", ThisKey="id", OtherKey="playerId")]
		public EntitySet<PlayerTask> PlayerTasks
		{
			get
			{
				return this._PlayerTasks;
			}
			set
			{
				this._PlayerTasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_Player", Storage="_Session", ThisKey="sessionId", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Session Session
		{
			get
			{
				return this._Session.Entity;
			}
			set
			{
				Session previousValue = this._Session.Entity;
				if (((previousValue != value) 
							|| (this._Session.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Session.Entity = null;
						previousValue.Players.Remove(this);
					}
					this._Session.Entity = value;
					if ((value != null))
					{
						value.Players.Add(this);
						this._sessionId = value.id;
					}
					else
					{
						this._sessionId = default(System.Guid);
					}
					this.SendPropertyChanged("Session");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Player", Storage="_Team", ThisKey="teamId", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.Players.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.Players.Add(this);
						this._teamId = value.id;
					}
					else
					{
						this._teamId = default(string);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PlayerItems(PlayerItem entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_PlayerItems(PlayerItem entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
		
		private void attach_PlayerTasks(PlayerTask entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_PlayerTasks(PlayerTask entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HGame.PlayerItem")]
	public partial class PlayerItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Guid _playerId;
		
		private string _itemId;
		
		private EntityRef<Player> _Player;
		
		private EntityRef<Item> _Item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnplayerIdChanging(System.Guid value);
    partial void OnplayerIdChanged();
    partial void OnitemIdChanging(string value);
    partial void OnitemIdChanged();
    #endregion
		
		public PlayerItem()
		{
			this._Player = default(EntityRef<Player>);
			this._Item = default(EntityRef<Item>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_playerId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid playerId
		{
			get
			{
				return this._playerId;
			}
			set
			{
				if ((this._playerId != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnplayerIdChanging(value);
					this.SendPropertyChanging();
					this._playerId = value;
					this.SendPropertyChanged("playerId");
					this.OnplayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_itemId", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string itemId
		{
			get
			{
				return this._itemId;
			}
			set
			{
				if ((this._itemId != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnitemIdChanging(value);
					this.SendPropertyChanging();
					this._itemId = value;
					this.SendPropertyChanged("itemId");
					this.OnitemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_PlayerItem", Storage="_Player", ThisKey="playerId", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.PlayerItems.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.PlayerItems.Add(this);
						this._playerId = value.id;
					}
					else
					{
						this._playerId = default(System.Guid);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_PlayerItem", Storage="_Item", ThisKey="itemId", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.PlayerItems.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.PlayerItems.Add(this);
						this._itemId = value.id;
					}
					else
					{
						this._itemId = default(string);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HGame.Newsfeed")]
	public partial class Newsfeed : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Guid _sessionId;
		
		private string _body;
		
		private System.DateTime _created;
		
		private string _context;
		
		private EntityRef<Session> _Session;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnsessionIdChanging(System.Guid value);
    partial void OnsessionIdChanged();
    partial void OnbodyChanging(string value);
    partial void OnbodyChanged();
    partial void OncreatedChanging(System.DateTime value);
    partial void OncreatedChanged();
    partial void OncontextChanging(string value);
    partial void OncontextChanged();
    #endregion
		
		public Newsfeed()
		{
			this._Session = default(EntityRef<Session>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sessionId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid sessionId
		{
			get
			{
				return this._sessionId;
			}
			set
			{
				if ((this._sessionId != value))
				{
					if (this._Session.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsessionIdChanging(value);
					this.SendPropertyChanging();
					this._sessionId = value;
					this.SendPropertyChanged("sessionId");
					this.OnsessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_body", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string body
		{
			get
			{
				return this._body;
			}
			set
			{
				if ((this._body != value))
				{
					this.OnbodyChanging(value);
					this.SendPropertyChanging();
					this._body = value;
					this.SendPropertyChanged("body");
					this.OnbodyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created", DbType="DateTime2 NOT NULL")]
		public System.DateTime created
		{
			get
			{
				return this._created;
			}
			set
			{
				if ((this._created != value))
				{
					this.OncreatedChanging(value);
					this.SendPropertyChanging();
					this._created = value;
					this.SendPropertyChanged("created");
					this.OncreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_context", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string context
		{
			get
			{
				return this._context;
			}
			set
			{
				if ((this._context != value))
				{
					this.OncontextChanging(value);
					this.SendPropertyChanging();
					this._context = value;
					this.SendPropertyChanged("context");
					this.OncontextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_Newsfeed", Storage="_Session", ThisKey="sessionId", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Session Session
		{
			get
			{
				return this._Session.Entity;
			}
			set
			{
				Session previousValue = this._Session.Entity;
				if (((previousValue != value) 
							|| (this._Session.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Session.Entity = null;
						previousValue.Newsfeeds.Remove(this);
					}
					this._Session.Entity = value;
					if ((value != null))
					{
						value.Newsfeeds.Add(this);
						this._sessionId = value.id;
					}
					else
					{
						this._sessionId = default(System.Guid);
					}
					this.SendPropertyChanged("Session");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HGame.PlayerTask")]
	public partial class PlayerTask : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Guid _playerId;
		
		private string _taskId;
		
		private System.DateTime _assigned;
		
		private string _state;
		
		private string _data;
		
		private EntityRef<Player> _Player;
		
		private EntityRef<Task> _Task;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnplayerIdChanging(System.Guid value);
    partial void OnplayerIdChanged();
    partial void OntaskIdChanging(string value);
    partial void OntaskIdChanged();
    partial void OnassignedChanging(System.DateTime value);
    partial void OnassignedChanged();
    partial void OnstateChanging(string value);
    partial void OnstateChanged();
    partial void OndataChanging(string value);
    partial void OndataChanged();
    #endregion
		
		public PlayerTask()
		{
			this._Player = default(EntityRef<Player>);
			this._Task = default(EntityRef<Task>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_playerId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid playerId
		{
			get
			{
				return this._playerId;
			}
			set
			{
				if ((this._playerId != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnplayerIdChanging(value);
					this.SendPropertyChanging();
					this._playerId = value;
					this.SendPropertyChanged("playerId");
					this.OnplayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_taskId", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string taskId
		{
			get
			{
				return this._taskId;
			}
			set
			{
				if ((this._taskId != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntaskIdChanging(value);
					this.SendPropertyChanging();
					this._taskId = value;
					this.SendPropertyChanged("taskId");
					this.OntaskIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_assigned", DbType="DateTime2 NOT NULL")]
		public System.DateTime assigned
		{
			get
			{
				return this._assigned;
			}
			set
			{
				if ((this._assigned != value))
				{
					this.OnassignedChanging(value);
					this.SendPropertyChanging();
					this._assigned = value;
					this.SendPropertyChanged("assigned");
					this.OnassignedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_state", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string state
		{
			get
			{
				return this._state;
			}
			set
			{
				if ((this._state != value))
				{
					this.OnstateChanging(value);
					this.SendPropertyChanging();
					this._state = value;
					this.SendPropertyChanged("state");
					this.OnstateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_data", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string data
		{
			get
			{
				return this._data;
			}
			set
			{
				if ((this._data != value))
				{
					this.OndataChanging(value);
					this.SendPropertyChanging();
					this._data = value;
					this.SendPropertyChanged("data");
					this.OndataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_PlayerTask", Storage="_Player", ThisKey="playerId", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.PlayerTasks.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.PlayerTasks.Add(this);
						this._playerId = value.id;
					}
					else
					{
						this._playerId = default(System.Guid);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_PlayerTask", Storage="_Task", ThisKey="taskId", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.PlayerTasks.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.PlayerTasks.Add(this);
						this._taskId = value.id;
					}
					else
					{
						this._taskId = default(string);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HGame.Item")]
	public partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id;
		
		private string _name;
		
		private short _size;
		
		private string _description;
		
		private bool _unique;
		
		private EntitySet<PlayerItem> _PlayerItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(string value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnsizeChanging(short value);
    partial void OnsizeChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnuniqueChanging(bool value);
    partial void OnuniqueChanged();
    #endregion
		
		public Item()
		{
			this._PlayerItems = new EntitySet<PlayerItem>(new Action<PlayerItem>(this.attach_PlayerItems), new Action<PlayerItem>(this.detach_PlayerItems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_size", DbType="SmallInt NOT NULL")]
		public short size
		{
			get
			{
				return this._size;
			}
			set
			{
				if ((this._size != value))
				{
					this.OnsizeChanging(value);
					this.SendPropertyChanging();
					this._size = value;
					this.SendPropertyChanged("size");
					this.OnsizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[unique]", Storage="_unique", DbType="Bit NOT NULL")]
		public bool unique
		{
			get
			{
				return this._unique;
			}
			set
			{
				if ((this._unique != value))
				{
					this.OnuniqueChanging(value);
					this.SendPropertyChanging();
					this._unique = value;
					this.SendPropertyChanged("unique");
					this.OnuniqueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_PlayerItem", Storage="_PlayerItems", ThisKey="id", OtherKey="itemId")]
		public EntitySet<PlayerItem> PlayerItems
		{
			get
			{
				return this._PlayerItems;
			}
			set
			{
				this._PlayerItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PlayerItems(PlayerItem entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_PlayerItems(PlayerItem entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HGame.Session")]
	public partial class Session : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.DateTime _start;
		
		private string _state;
		
		private System.DateTime _lastModified;
		
		private EntitySet<Player> _Players;
		
		private EntitySet<Newsfeed> _Newsfeeds;
		
		private EntitySet<Notification> _Notifications;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnstartChanging(System.DateTime value);
    partial void OnstartChanged();
    partial void OnstateChanging(string value);
    partial void OnstateChanged();
    partial void OnlastModifiedChanging(System.DateTime value);
    partial void OnlastModifiedChanged();
    #endregion
		
		public Session()
		{
			this._Players = new EntitySet<Player>(new Action<Player>(this.attach_Players), new Action<Player>(this.detach_Players));
			this._Newsfeeds = new EntitySet<Newsfeed>(new Action<Newsfeed>(this.attach_Newsfeeds), new Action<Newsfeed>(this.detach_Newsfeeds));
			this._Notifications = new EntitySet<Notification>(new Action<Notification>(this.attach_Notifications), new Action<Notification>(this.detach_Notifications));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_start", DbType="DateTime2 NOT NULL")]
		public System.DateTime start
		{
			get
			{
				return this._start;
			}
			set
			{
				if ((this._start != value))
				{
					this.OnstartChanging(value);
					this.SendPropertyChanging();
					this._start = value;
					this.SendPropertyChanged("start");
					this.OnstartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_state", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string state
		{
			get
			{
				return this._state;
			}
			set
			{
				if ((this._state != value))
				{
					this.OnstateChanging(value);
					this.SendPropertyChanging();
					this._state = value;
					this.SendPropertyChanged("state");
					this.OnstateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastModified", DbType="DateTime2 NOT NULL")]
		public System.DateTime lastModified
		{
			get
			{
				return this._lastModified;
			}
			set
			{
				if ((this._lastModified != value))
				{
					this.OnlastModifiedChanging(value);
					this.SendPropertyChanging();
					this._lastModified = value;
					this.SendPropertyChanged("lastModified");
					this.OnlastModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_Player", Storage="_Players", ThisKey="id", OtherKey="sessionId")]
		public EntitySet<Player> Players
		{
			get
			{
				return this._Players;
			}
			set
			{
				this._Players.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_Newsfeed", Storage="_Newsfeeds", ThisKey="id", OtherKey="sessionId")]
		public EntitySet<Newsfeed> Newsfeeds
		{
			get
			{
				return this._Newsfeeds;
			}
			set
			{
				this._Newsfeeds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_Notification", Storage="_Notifications", ThisKey="id", OtherKey="sessionId")]
		public EntitySet<Notification> Notifications
		{
			get
			{
				return this._Notifications;
			}
			set
			{
				this._Notifications.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.Session = this;
		}
		
		private void detach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.Session = null;
		}
		
		private void attach_Newsfeeds(Newsfeed entity)
		{
			this.SendPropertyChanging();
			entity.Session = this;
		}
		
		private void detach_Newsfeeds(Newsfeed entity)
		{
			this.SendPropertyChanging();
			entity.Session = null;
		}
		
		private void attach_Notifications(Notification entity)
		{
			this.SendPropertyChanging();
			entity.Session = this;
		}
		
		private void detach_Notifications(Notification entity)
		{
			this.SendPropertyChanging();
			entity.Session = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HGame.Task")]
	public partial class Task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id;
		
		private bool _active;
		
		private bool _manual;
		
		private string _name;
		
		private int _duration;
		
		private int _minPlayerRank;
		
		private int _minTechLevel;
		
		private EntitySet<PlayerTask> _PlayerTasks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(string value);
    partial void OnidChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void OnmanualChanging(bool value);
    partial void OnmanualChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndurationChanging(int value);
    partial void OndurationChanged();
    partial void OnminPlayerRankChanging(int value);
    partial void OnminPlayerRankChanged();
    partial void OnminTechLevelChanging(int value);
    partial void OnminTechLevelChanged();
    #endregion
		
		public Task()
		{
			this._PlayerTasks = new EntitySet<PlayerTask>(new Action<PlayerTask>(this.attach_PlayerTasks), new Action<PlayerTask>(this.detach_PlayerTasks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_manual", DbType="Bit NOT NULL")]
		public bool manual
		{
			get
			{
				return this._manual;
			}
			set
			{
				if ((this._manual != value))
				{
					this.OnmanualChanging(value);
					this.SendPropertyChanging();
					this._manual = value;
					this.SendPropertyChanged("manual");
					this.OnmanualChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_duration", DbType="Int NOT NULL")]
		public int duration
		{
			get
			{
				return this._duration;
			}
			set
			{
				if ((this._duration != value))
				{
					this.OndurationChanging(value);
					this.SendPropertyChanging();
					this._duration = value;
					this.SendPropertyChanged("duration");
					this.OndurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_minPlayerRank", DbType="Int NOT NULL")]
		public int minPlayerRank
		{
			get
			{
				return this._minPlayerRank;
			}
			set
			{
				if ((this._minPlayerRank != value))
				{
					this.OnminPlayerRankChanging(value);
					this.SendPropertyChanging();
					this._minPlayerRank = value;
					this.SendPropertyChanged("minPlayerRank");
					this.OnminPlayerRankChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_minTechLevel", DbType="Int NOT NULL")]
		public int minTechLevel
		{
			get
			{
				return this._minTechLevel;
			}
			set
			{
				if ((this._minTechLevel != value))
				{
					this.OnminTechLevelChanging(value);
					this.SendPropertyChanging();
					this._minTechLevel = value;
					this.SendPropertyChanged("minTechLevel");
					this.OnminTechLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_PlayerTask", Storage="_PlayerTasks", ThisKey="id", OtherKey="taskId")]
		public EntitySet<PlayerTask> PlayerTasks
		{
			get
			{
				return this._PlayerTasks;
			}
			set
			{
				this._PlayerTasks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PlayerTasks(PlayerTask entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_PlayerTasks(PlayerTask entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HGame.Notification")]
	public partial class Notification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Guid _sessionId;
		
		private string _recipientTeamId;
		
		private System.Nullable<System.Guid> _recipientPlayerId;
		
		private System.DateTime _created;
		
		private string _message;
		
		private EntityRef<Session> _Session;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnsessionIdChanging(System.Guid value);
    partial void OnsessionIdChanged();
    partial void OnrecipientTeamIdChanging(string value);
    partial void OnrecipientTeamIdChanged();
    partial void OnrecipientPlayerIdChanging(System.Nullable<System.Guid> value);
    partial void OnrecipientPlayerIdChanged();
    partial void OncreatedChanging(System.DateTime value);
    partial void OncreatedChanged();
    partial void OnmessageChanging(string value);
    partial void OnmessageChanged();
    #endregion
		
		public Notification()
		{
			this._Session = default(EntityRef<Session>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sessionId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid sessionId
		{
			get
			{
				return this._sessionId;
			}
			set
			{
				if ((this._sessionId != value))
				{
					if (this._Session.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsessionIdChanging(value);
					this.SendPropertyChanging();
					this._sessionId = value;
					this.SendPropertyChanged("sessionId");
					this.OnsessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_recipientTeamId", DbType="VarChar(50)")]
		public string recipientTeamId
		{
			get
			{
				return this._recipientTeamId;
			}
			set
			{
				if ((this._recipientTeamId != value))
				{
					this.OnrecipientTeamIdChanging(value);
					this.SendPropertyChanging();
					this._recipientTeamId = value;
					this.SendPropertyChanged("recipientTeamId");
					this.OnrecipientTeamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_recipientPlayerId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> recipientPlayerId
		{
			get
			{
				return this._recipientPlayerId;
			}
			set
			{
				if ((this._recipientPlayerId != value))
				{
					this.OnrecipientPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._recipientPlayerId = value;
					this.SendPropertyChanged("recipientPlayerId");
					this.OnrecipientPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created", DbType="DateTime2 NOT NULL")]
		public System.DateTime created
		{
			get
			{
				return this._created;
			}
			set
			{
				if ((this._created != value))
				{
					this.OncreatedChanging(value);
					this.SendPropertyChanging();
					this._created = value;
					this.SendPropertyChanged("created");
					this.OncreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_message", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string message
		{
			get
			{
				return this._message;
			}
			set
			{
				if ((this._message != value))
				{
					this.OnmessageChanging(value);
					this.SendPropertyChanging();
					this._message = value;
					this.SendPropertyChanged("message");
					this.OnmessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_Notification", Storage="_Session", ThisKey="sessionId", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Session Session
		{
			get
			{
				return this._Session.Entity;
			}
			set
			{
				Session previousValue = this._Session.Entity;
				if (((previousValue != value) 
							|| (this._Session.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Session.Entity = null;
						previousValue.Notifications.Remove(this);
					}
					this._Session.Entity = value;
					if ((value != null))
					{
						value.Notifications.Add(this);
						this._sessionId = value.id;
					}
					else
					{
						this._sessionId = default(System.Guid);
					}
					this.SendPropertyChanged("Session");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HGame.Team")]
	public partial class Team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id;
		
		private string _name;
		
		private int _score;
		
		private string _description;
		
		private string _goal;
		
		private EntitySet<Player> _Players;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(string value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnscoreChanging(int value);
    partial void OnscoreChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OngoalChanging(string value);
    partial void OngoalChanged();
    #endregion
		
		public Team()
		{
			this._Players = new EntitySet<Player>(new Action<Player>(this.attach_Players), new Action<Player>(this.detach_Players));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_score", DbType="Int NOT NULL")]
		public int score
		{
			get
			{
				return this._score;
			}
			set
			{
				if ((this._score != value))
				{
					this.OnscoreChanging(value);
					this.SendPropertyChanging();
					this._score = value;
					this.SendPropertyChanged("score");
					this.OnscoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_goal", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string goal
		{
			get
			{
				return this._goal;
			}
			set
			{
				if ((this._goal != value))
				{
					this.OngoalChanging(value);
					this.SendPropertyChanging();
					this._goal = value;
					this.SendPropertyChanged("goal");
					this.OngoalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Player", Storage="_Players", ThisKey="id", OtherKey="teamId")]
		public EntitySet<Player> Players
		{
			get
			{
				return this._Players;
			}
			set
			{
				this._Players.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
	}
}
#pragma warning restore 1591
